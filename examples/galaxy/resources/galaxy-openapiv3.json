{
  "openapi": "3.0.1",
  "info": {
    "title": "Starburst Galaxy Public API",
    "version": "v1"
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "tags": [
    {
      "name": "Cluster Service",
      "description": "Cluster related operations"
    },
    {
      "name": "User Service",
      "description": "User related operations"
    },
    {
      "name": "Role Service",
      "description": "Role related operations"
    },
    {
      "name": "Privilege Service",
      "description": "List, grant and revoke role privileges"
    },
    {
      "name": "SchemaDiscovery Service",
      "description": "Schema discovery related operations\n\n<a href=\"https://docs.starburst.io/starburst-galaxy/working-with-data/explore-data/schema-discovery.html\">See feature documentation</a>\n"
    },
    {
      "name": "Catalog Service",
      "description": "Catalog related operations"
    },
    {
      "name": "Discovery Service",
      "description": "Catalog data discovery operations"
    },
    {
      "name": "Tag Service",
      "description": "Tag related operations"
    },
    {
      "name": "RowFilter Service",
      "description": "Row filter related operations"
    },
    {
      "name": "ServiceAccount Service",
      "description": "Service account related operations"
    },
    {
      "name": "ColumnMask Service",
      "description": "Column mask related operations"
    },
    {
      "name": "Policy Service",
      "description": "Policy related operatios"
    },
    {
      "name": "DataProduct Service",
      "description": "Data Product related operations"
    },
    {
      "name": "About",
      "description": "APIs for managing your Starburst Galaxy account. Learn more about <a href=\"https://docs.starburst.io/starburst-galaxy/api.html\" style=\"text-decoration: none !important\" target=\"_blank\">the Starburst Galaxy Public API ↗️</a>.\n\n\n<a href=\"/public/openapi/v1/json\" style=\"text-decoration: none !important\" download=\"openApi.json\">⬇️ Download OpenAPI specification</a>\n"
    },
    {
      "name": "Access Tokens",
      "description": "Access tokens are obtained using the OAuth2 credentials flow and API authentication tokens.\n\n1. Create an API authentication token at `https://{account-domain}/api-auth-token`\n2. Use the API authentication token to obtain a temporary access token by POST to `https://{account-domain}/oauth/v2/token`. The request must have a Basic Authorization header with the client ID and secret Base64 encoded in the form `clientId:clientSecret`. The request body must be `grant_type=client_credentials`.\n\n`cURL` example:\n\n```\ncurl -X POST \\\n  -H 'Authorization: Basic {base64(clientId:clientSecret)}' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=client_credentials' \\\n  https://{account-domain}/oauth/v2/token\n```\n\nThe access token returned can be used to make API calls with the header `Authorization: Bearer {access token}`.\n"
    },
    {
      "name": "Model Definitions",
      "description": ""
    },
    {
      "name": "Responses",
      "description": ""
    }
  ],
  "paths": {
    "/public/api/v1/catalog": {
      "get": {
        "tags": [
          "Catalog Service"
        ],
        "description": "List an account's catalog identifiers",
        "operationId": "listCatalog",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCatalog"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog's schemas along with any Galaxy added metadata",
        "operationId": "listCatalogSchema",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSchema"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "429": {
            "description": "ResourceExhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quotafailure"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/catalogMetadata": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return catalog metadata with any Galaxy added metadata",
        "operationId": "getCatalogCatalogMetadata",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogMetadata"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "429": {
            "description": "ResourceExhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quotafailure"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/columnMask": {
      "get": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Return all column masks defined for your account",
        "operationId": "listColumnMask",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Create a column mask",
        "operationId": "createColumnMask",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateColumnMask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}/serviceAccountPassword": {
      "post": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Create a new service account password. To construct the password to be used for querying, concatenate the following strings without the angle brackets: GXY$<passwordPrefix><password>. The values for these can be found in the reply JSON",
        "operationId": "createServiceAccountServiceAccountPassword",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Passwords"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}/serviceAccountPassword/{serviceAccountPasswordId}": {
      "delete": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Delete a service account password",
        "operationId": "deleteServiceAccountPasswordServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceAccountPasswordId",
            "description": "A service account password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema/{schemaId}/table": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog schema's tables along with any Galaxy added metadata",
        "operationId": "listCatalogSchemaTable",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTable"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "429": {
            "description": "ResourceExhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quotafailure"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount/{serviceAccountId}": {
      "get": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Get a service account by user id",
        "operationId": "getServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Delete a service account",
        "operationId": "deleteServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Update a service account\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateServiceAccount",
        "parameters": [
          {
            "in": "path",
            "name": "serviceAccountId",
            "description": "A service account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceAccountPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/user": {
      "get": {
        "tags": [
          "User Service"
        ],
        "description": "Return a list of users",
        "operationId": "listUser",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUser"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Service"
        ],
        "description": "Create a user",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}": {
      "get": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Get schema discovery by id",
        "operationId": "getSchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "schemaDiscoveryId",
            "description": "A schema discovery run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Delete schema discovery by schemaDiscoveryId. Discoveries in progress or ones that are latest applied for path cannot be deleted.",
        "operationId": "deleteSchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "schemaDiscoveryId",
            "description": "A schema discovery run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "Get information about a role",
        "operationId": "getRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Role Service"
        ],
        "description": "Delete a role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Role Service"
        ],
        "description": "Grant and revoke roles\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateRole",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolePatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/privilege": {
      "get": {
        "tags": [
          "Privilege Service"
        ],
        "description": "List all privileges granted to a role",
        "operationId": "listRolePrivilege",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "listAllPrivileges",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGrantedPrivilege"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/dataProduct": {
      "get": {
        "tags": [
          "DataProduct Service"
        ],
        "description": "Return a paginated list of Data Products that are visible to the logged in role",
        "operationId": "listDataProduct",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDataProduct"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataProduct Service"
        ],
        "description": "Create a Data Product",
        "operationId": "createDataProduct",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/dataProduct/{dataProductId}": {
      "get": {
        "tags": [
          "DataProduct Service"
        ],
        "description": "Get Data Product by id",
        "operationId": "getDataProduct",
        "parameters": [
          {
            "in": "path",
            "name": "dataProductId",
            "description": "A Galaxy Data Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataProduct Service"
        ],
        "description": "Delete a Data Product",
        "operationId": "deleteDataProduct",
        "parameters": [
          {
            "in": "path",
            "name": "dataProductId",
            "description": "A Galaxy Data Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataProduct Service"
        ],
        "description": "Update a Data Product\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateDataProduct",
        "parameters": [
          {
            "in": "path",
            "name": "dataProductId",
            "description": "A Galaxy Data Product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDataProductPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProduct"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster/{clusterId}": {
      "get": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Get cluster by id",
        "operationId": "getCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "- A Trino cluster\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Delete a cluster",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "- A Trino cluster\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Update a cluster. Only the owner of the cluster can perform this operation\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateCluster",
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "- A Trino cluster\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClusterPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/schemaDiscovery/{schemaDiscoveryId}:apply": {
      "post": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Execute SQL statements generated by schema discovery",
        "operationId": "applySchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "schemaDiscoveryId",
            "description": "A schema discovery run",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a catalog",
        "operationId": "updateCatalogTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a catalog",
        "operationId": "deleteCatalogTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/user/{userId}": {
      "get": {
        "tags": [
          "User Service"
        ],
        "description": "Get a user",
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "- A user\n- This parameter can be looked up using `email` instead of its Id. Use `email=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User Service"
        ],
        "description": "Grant and revoke user roles\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "- A user\n- This parameter can be looked up using `email` instead of its Id. Use `email=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a schema",
        "operationId": "updateCatalogSchemaTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a schema",
        "operationId": "deleteCatalogSchemaTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}/table/{tableId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a table",
        "operationId": "updateCatalogSchemaTableTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a table",
        "operationId": "deleteCatalogSchemaTableTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/cluster": {
      "get": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Return the clusters of your account",
        "operationId": "listCluster",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCluster"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cluster Service"
        ],
        "description": "Create a cluster",
        "operationId": "createCluster",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCluster"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/rolegrant": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "    List all users, groups, and roles a role has been granted to. This includes transitive grants.\n\n    For example, if Role B has been granted to Role A, and Role C has been granted to Role B, the grants returned in this API for Role A will include both Role B and Role C.\n\n    Similarly, in this example, if User Y and User Z both have been granted Role A, querying this API for Role C will include both users.\n    Both users can assume Role C via their transitive grants of Role A.\n\n    For more information about roles, please visit https://docs.starburst.io/starburst-galaxy/security/roles.html\n",
        "operationId": "listRoleRolegrant",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRolegrant"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/rowFilter": {
      "get": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Return all row filters defined for your account",
        "operationId": "listRowFilter",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRowFilter"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Create a row filter",
        "operationId": "createRowFilter",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRowFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/columnMask/{columnMaskId}": {
      "get": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Get a column mask by id",
        "operationId": "getColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "- A column mask\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Delete a column mask",
        "operationId": "deleteColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "- A column mask\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ColumnMask Service"
        ],
        "description": "Update a column mask\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateColumnMask",
        "parameters": [
          {
            "in": "path",
            "name": "columnMaskId",
            "description": "- A column mask\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnMaskPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnMask"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/privilege:grant": {
      "post": {
        "tags": [
          "Privilege Service"
        ],
        "description": "Grant a privilege to a role",
        "operationId": "grantRolePrivilege",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Privilege"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/rowFilter/{rowFilterId}": {
      "get": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Get a row filter by id",
        "operationId": "getRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "- A row filter\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Delete a row filter",
        "operationId": "deleteRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "- A row filter\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "RowFilter Service"
        ],
        "description": "Update a row filter\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateRowFilter",
        "parameters": [
          {
            "in": "path",
            "name": "rowFilterId",
            "description": "- A row filter\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowFilterForUpdatePatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RowFilter"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}": {
      "get": {
        "tags": [
          "Tag Service"
        ],
        "description": "Get a tag by id",
        "operationId": "getTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Delete a tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tag Service"
        ],
        "description": "Update a tag\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdateTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role/{roleId}/privilege:revoke": {
      "post": {
        "tags": [
          "Privilege Service"
        ],
        "description": "Revoke a privilege from a role",
        "operationId": "revokeRolePrivilege",
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "- A role\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokePrivilege"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schema/{schemaId}/table/{tableId}/column": {
      "get": {
        "tags": [
          "Discovery Service"
        ],
        "description": "Return a catalog table's columns along with any Galaxy added metadata",
        "operationId": "listCatalogSchemaTableColumn",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedColumn"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "429": {
            "description": "ResourceExhausted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quotafailure"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/policy": {
      "get": {
        "tags": [
          "Policy Service"
        ],
        "description": "Return all policies defined for your account",
        "operationId": "listPolicy",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "enablingRoleId",
            "description": "Query filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPolicy"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Policy Service"
        ],
        "description": "Create a policy",
        "operationId": "createPolicy",
        "parameters": [
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag/{tagId}/catalog/{catalogId}/schema/{schemaId}/table/{tableId}/column/{columnId}": {
      "put": {
        "tags": [
          "Tag Service"
        ],
        "description": "Apply a tag to a column",
        "operationId": "updateCatalogSchemaTableColumnTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "columnId",
            "description": "A column from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Service"
        ],
        "description": "Revoke a tag applied to a column",
        "operationId": "deleteCatalogSchemaTableColumnTag",
        "parameters": [
          {
            "in": "path",
            "name": "tagId",
            "description": "- A tag\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaId",
            "description": "A schema from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tableId",
            "description": "A table from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "columnId",
            "description": "A column from a catalog",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "Aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/tag": {
      "get": {
        "tags": [
          "Tag Service"
        ],
        "description": "Return all tags defined for your account",
        "operationId": "listTag",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTag"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tag Service"
        ],
        "description": "Create a tag",
        "operationId": "createTag",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/policy/{policyId}": {
      "get": {
        "tags": [
          "Policy Service"
        ],
        "description": "Get a policy by id",
        "operationId": "getPolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "- A policy\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Policy Service"
        ],
        "description": "Delete a policy",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "- A policy\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Policy Service"
        ],
        "description": "Update a policy\n\nOnly include fields you wish to update. Missing or unrecognized fields are ignored.",
        "operationId": "patchUpdatePolicy",
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "- A policy\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validateOnly",
            "description": "If true validate only without taking any action",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "description": "NoLongerAvailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/serviceAccount": {
      "get": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Return all service accounts defined for your account",
        "operationId": "listServiceAccount",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ServiceAccount Service"
        ],
        "description": "Create a service account",
        "operationId": "createServiceAccount",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/role": {
      "get": {
        "tags": [
          "Role Service"
        ],
        "description": "Return a list of roles",
        "operationId": "listRole",
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRole"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Role Service"
        ],
        "description": "Create a role",
        "operationId": "createRole",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          },
          "409": {
            "description": "AlreadyExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/v1/catalog/{catalogId}/schemaDiscovery": {
      "get": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Get schema discoveries for catalog. When getting all runs, they won't contain same level of detail as when getting run by its ID.",
        "operationId": "listCatalogSchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "latest",
            "description": "",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": false
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "description": "Pagination Token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size or 0 for default (current maximum is 100)",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SchemaDiscovery Service"
        ],
        "description": "Run schema discovery under catalog, for specified uri. This operation is async and runs in background. It is important to check `status` field to make sure it has completed and results are ready.",
        "operationId": "createCatalogSchemaDiscovery",
        "parameters": [
          {
            "in": "path",
            "name": "catalogId",
            "description": "- A catalog\n- This parameter can be looked up using `name` instead of its Id. Use `name=value` instead of an Id to lookup/search using the `value`. `value` must be encoded ([see RFC](https://www.rfc-editor.org/rfc/rfc3986#section-2.2) including `=`)\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunSchemaDiscovery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDiscovery"
                }
              }
            }
          },
          "400": {
            "description": "InvalidArgument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Badrequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "403": {
            "description": "PermissionDenied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errorinfo"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resourceinfo"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "accessToken": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "Access token"
      }
    },
    "schemas": {
      "Policy": {
        "required": [
          "created",
          "description",
          "modified",
          "name",
          "policyId",
          "predicate",
          "roleId",
          "scopes",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "policyId": {
            "type": "string",
            "description": "Policy ID (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Enabling role ID"
          },
          "name": {
            "type": "string",
            "description": "Policy name"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration"
          },
          "scopes": {
            "type": "array",
            "description": "Policy scopes",
            "items": {
              "$ref": "#/components/schemas/Scopes"
            }
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A policy",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateTagPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name"
          },
          "color": {
            "type": "string",
            "description": "Tag color"
          },
          "description": {
            "type": "string",
            "description": "comment"
          }
        },
        "description": "Update a tag",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "ServiceAccount": {
        "required": [
          "additionalRoleIds",
          "passwords",
          "roleId",
          "serviceAccountId",
          "syncToken",
          "userName"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "serviceAccountId": {
            "type": "string",
            "description": "Service account ID (read only)"
          },
          "userName": {
            "type": "string",
            "description": "Service account user name (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Default role (read only)"
          },
          "additionalRoleIds": {
            "type": "array",
            "description": "Additional roles",
            "items": {
              "type": "string",
              "description": "Additional roles (read only)"
            }
          },
          "passwords": {
            "type": "array",
            "description": "Passwords",
            "items": {
              "$ref": "#/components/schemas/Passwords"
            }
          }
        },
        "description": "A service account",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Schema": {
        "required": [
          "contacts",
          "links",
          "schemaId",
          "tagName"
        ],
        "properties": {
          "schemaId": {
            "type": "string",
            "description": "Schema ID (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this schema (read only)"
          },
          "roleWithName": {
            "$ref": "#/components/schemas/RoleWithName"
          },
          "tagName": {
            "type": "array",
            "description": "Any tags set for this schema",
            "items": {
              "$ref": "#/components/schemas/TagName"
            }
          },
          "contacts": {
            "type": "array",
            "description": "Any contacts set for this schema",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            }
          },
          "links": {
            "type": "array",
            "description": "Any links set for this schema",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          }
        },
        "description": "A schema from a catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Privilege": {
        "required": [
          "entityId",
          "entityKind",
          "grantKind",
          "grantOption",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "grantOption": {
            "type": "boolean",
            "description": "Grant option",
            "nullable": false
          },
          "privilege": {
            "type": "string",
            "description": "Privilege",
            "enum": [
              "ManageSecurity",
              "CreateRole",
              "CreateUser",
              "CreateCluster",
              "CreateCatalog",
              "ViewAuditLog",
              "ManageBilling",
              "ManageNotifications",
              "ViewAllQueryHistory",
              "ManageSso",
              "SsoUserPasswordLogin",
              "ViewAllDataLineage",
              "UseCluster",
              "EnableDisableCluster",
              "MonitorCluster",
              "CreateSchema",
              "CreateTable",
              "Insert",
              "Delete",
              "Select",
              "Update",
              "ManageDataObservability",
              "CreateSql",
              "Execute",
              "ManageServiceAccount",
              "ManageServiceAccountToken",
              "ManageOauthClient",
              "ViewPublicOauthClient",
              "ManageAccountWork",
              "CreateTag",
              "ApplyTag",
              "ApplyTagInPath",
              "GenerativeAiFeatures",
              "ManageIngestStreams",
              "CreateFunction",
              "CancelQuery",
              "ViewDataProduct",
              "DownloadQueryResults",
              "ManageQueryRoutingRules"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          }
        },
        "description": "A role privilege to grant",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateColumnMaskPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Column mask name"
          },
          "expression": {
            "type": "string",
            "description": "Column mask expression"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column mask type",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Update a column mask",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateUserPatch": {
        "properties": {
          "updateRoleGrant": {
            "type": "array",
            "description": "Directly granted roles",
            "items": {
              "$ref": "#/components/schemas/UpdateRoleGrantPatch"
            }
          }
        },
        "description": "Grant or revoke user roles",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedColumn": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "TagName": {
        "required": [
          "name",
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "Tag ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          }
        },
        "description": "Any tags set for this catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Errorinfo": {
        "required": [
          "metadata",
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "Error reason/detail (read only)"
          },
          "metadata": {
            "type": "object",
            "description": "Any additional details",
            "additionalProperties": {
              "type": "string",
              "description": "Any additional details (read only)"
            }
          }
        },
        "description": "Error (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "PaginatedGrantedPrivilege": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/GrantedPrivilege"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateServiceAccount": {
        "required": [
          "additionalRoleIds",
          "username",
          "withInitialPassword"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Service account name (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Default role ID (read only)"
          },
          "additionalRoleIds": {
            "type": "array",
            "description": "Additional role IDs",
            "items": {
              "type": "string",
              "description": "Additional role IDs (read only)"
            }
          },
          "withInitialPassword": {
            "type": "boolean",
            "description": "Whether to create an initial password (read only)",
            "nullable": false
          }
        },
        "description": "A service account",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateDataProductPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Data Product name"
          },
          "summary": {
            "type": "string",
            "description": "Short summary of Data Product"
          },
          "description": {
            "type": "string",
            "description": "Long form description of Data Product"
          },
          "contacts": {
            "type": "array",
            "description": "Data Product contacts",
            "items": {
              "$ref": "#/components/schemas/ContactsPatch"
            }
          },
          "defaultClusterId": {
            "type": "string",
            "description": "Default cluster ID for Data Product"
          }
        },
        "description": "Update a Galaxy Data Product",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedCluster": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Cluster"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateCluster": {
        "required": [
          "catalogRefs",
          "cloudRegionId",
          "maxWorkers",
          "minWorkers",
          "name",
          "privateLinkCluster",
          "resultCacheEnabled",
          "warpResiliencyEnabled"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cluster being created"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Cloud region ID of where the cluster will be created"
          },
          "catalogRefs": {
            "type": "array",
            "description": "Catalog IDs to attach to the cluster",
            "items": {
              "type": "string",
              "description": "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle suspend duration (in minutes)",
            "nullable": false
          },
          "processingMode": {
            "type": "string",
            "description": "Cluster query processing mode",
            "enum": [
              "Batch",
              "WarpSpeed"
            ]
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count",
            "nullable": false
          },
          "warpResiliencyEnabled": {
            "type": "boolean",
            "description": "Enable/Disable warp resiliency",
            "nullable": false
          },
          "resultCacheEnabled": {
            "type": "boolean",
            "description": "Enable/Disable resultset caching",
            "nullable": false
          },
          "resultCacheDefaultVisibilitySeconds": {
            "format": "int64",
            "type": "integer",
            "description": "Default visibility for resultset caching (in seconds)",
            "nullable": false
          },
          "privateLinkCluster": {
            "type": "boolean",
            "description": "Private Link Enabled",
            "nullable": false
          }
        },
        "description": "Create a Trino cluster",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "User": {
        "required": [
          "allRoles",
          "createdOn",
          "directlyGrantedRoles",
          "email",
          "scimManaged",
          "syncToken",
          "userId"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "userId": {
            "type": "string",
            "description": "User ID (read only)"
          },
          "email": {
            "type": "string",
            "description": "User email (read only)"
          },
          "defaultRoleId": {
            "type": "string",
            "description": "Default role id (read only)"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date (read only)"
          },
          "scimManaged": {
            "type": "boolean",
            "description": "SCIM managed (read only)",
            "nullable": false
          },
          "directlyGrantedRoles": {
            "type": "array",
            "description": "Directly granted roles",
            "items": {
              "$ref": "#/components/schemas/DirectlyGrantedRoles"
            }
          },
          "allRoles": {
            "type": "array",
            "description": "All directly granted, inherited and group roles",
            "items": {
              "$ref": "#/components/schemas/DirectlyGrantedRoles"
            }
          }
        },
        "description": "A user",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Catalog": {
        "required": [
          "catalogId",
          "catalogName"
        ],
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "catalogName": {
            "type": "string",
            "description": "Catalog name (read only)"
          }
        },
        "description": "A catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedUser": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "ScopesPatch": {
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          },
          "rowFilterIds": {
            "type": "array",
            "description": "Row filters",
            "items": {
              "type": "string",
              "description": "Row filters"
            }
          },
          "columnMaskId": {
            "type": "string",
            "description": "Column mask"
          }
        },
        "description": "Policy scopes",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedTag": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Contacts": {
        "required": [
          "email",
          "userId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID (read only)"
          },
          "email": {
            "type": "string",
            "description": "User email (read only)"
          }
        },
        "description": "Any contacts set for this catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateRoleGrantPatch": {
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID"
          },
          "adminOption": {
            "type": "boolean",
            "description": "Admin option",
            "nullable": false
          }
        },
        "description": "Directly granted roles",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedTable": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CatalogMetadata": {
        "required": [
          "catalogId",
          "catalogName",
          "contacts",
          "tagName"
        ],
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "catalogName": {
            "type": "string",
            "description": "Catalog name (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this catalog (read only)"
          },
          "roleWithName": {
            "$ref": "#/components/schemas/RoleWithName"
          },
          "tagName": {
            "type": "array",
            "description": "Any tags set for this catalog",
            "items": {
              "$ref": "#/components/schemas/TagName"
            }
          },
          "contacts": {
            "type": "array",
            "description": "Any contacts set for this catalog",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            }
          }
        },
        "description": "A catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedCatalog": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Catalog"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "DiscoveredSqlStatement": {
        "required": [
          "sql",
          "status"
        ],
        "properties": {
          "sql": {
            "type": "string",
            "description": "Raw generated SQL (read only)"
          },
          "status": {
            "type": "string",
            "description": "Status of the statement (read only)",
            "enum": [
              "Waiting",
              "Applying",
              "Success",
              "Errored",
              "Canceled"
            ]
          },
          "message": {
            "type": "string",
            "description": "Message describing statement or error message in case of execution failure (read only)"
          }
        },
        "description": "Generated SQL statements (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Passwords": {
        "required": [
          "created",
          "passwordPrefix",
          "serviceAccountPasswordId",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "serviceAccountPasswordId": {
            "type": "string",
            "description": "Service account password ID (read only)"
          },
          "passwordPrefix": {
            "type": "string",
            "description": "Service account password prefix (read only)"
          },
          "password": {
            "type": "string",
            "description": "Service account password (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Creation time (read only)"
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": "Last login time (read only)"
          }
        },
        "description": "Passwords (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateDataProduct": {
        "required": [
          "catalogId",
          "contacts",
          "name",
          "schemaName",
          "summary"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Data Product name"
          },
          "summary": {
            "type": "string",
            "description": "Short summary of Data Product"
          },
          "description": {
            "type": "string",
            "description": "Long form description of Data Product"
          },
          "catalogId": {
            "type": "string",
            "description": "Catalog ID"
          },
          "schemaName": {
            "type": "string",
            "description": "Name of the data product schema"
          },
          "contacts": {
            "type": "array",
            "description": "Data Product contacts",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            }
          },
          "links": {
            "type": "array",
            "description": "Any links for this Data Product",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          },
          "defaultClusterId": {
            "type": "string",
            "description": "Default cluster ID for Data Product"
          }
        },
        "description": "Create a Galaxy Data Product",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateColumnMask": {
        "required": [
          "columnMaskType",
          "description",
          "expression",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Column mask name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Column mask expression (read only)"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column mask type (read only)",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          }
        },
        "description": "A new column mask",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "RevokePrivilege": {
        "required": [
          "entityId",
          "entityKind",
          "privilege",
          "revokeAction"
        ],
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "privilege": {
            "type": "string",
            "description": "Privilege",
            "enum": [
              "ManageSecurity",
              "CreateRole",
              "CreateUser",
              "CreateCluster",
              "CreateCatalog",
              "ViewAuditLog",
              "ManageBilling",
              "ManageNotifications",
              "ViewAllQueryHistory",
              "ManageSso",
              "SsoUserPasswordLogin",
              "ViewAllDataLineage",
              "UseCluster",
              "EnableDisableCluster",
              "MonitorCluster",
              "CreateSchema",
              "CreateTable",
              "Insert",
              "Delete",
              "Select",
              "Update",
              "ManageDataObservability",
              "CreateSql",
              "Execute",
              "ManageServiceAccount",
              "ManageServiceAccountToken",
              "ManageOauthClient",
              "ViewPublicOauthClient",
              "ManageAccountWork",
              "CreateTag",
              "ApplyTag",
              "ApplyTagInPath",
              "GenerativeAiFeatures",
              "ManageIngestStreams",
              "CreateFunction",
              "CancelQuery",
              "ViewDataProduct",
              "DownloadQueryResults",
              "ManageQueryRoutingRules"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          },
          "revokeAction": {
            "type": "string",
            "description": "Revoke grant option or remove role privilege",
            "enum": [
              "RevokeGrantOption",
              "RemoveRoleGrant"
            ]
          }
        },
        "description": "A role privilege to revoke",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "DataProduct": {
        "required": [
          "contacts",
          "createdOn",
          "dataProductId",
          "links",
          "modifiedOn",
          "name",
          "summary",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "dataProductId": {
            "type": "string",
            "description": "Data Product ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Data Product name (read only)"
          },
          "summary": {
            "type": "string",
            "description": "Short summary of Data Product (read only)"
          },
          "description": {
            "type": "string",
            "description": "Long form description of Data Product (read only)"
          },
          "catalog": {
            "$ref": "#/components/schemas/Catalog2"
          },
          "schemaName": {
            "type": "string",
            "description": "Name of the data product schema (read only)"
          },
          "contacts": {
            "type": "array",
            "description": "Data Product contacts",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            }
          },
          "links": {
            "type": "array",
            "description": "Any links for this Data Product",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          },
          "defaultClusterId": {
            "type": "string",
            "description": "Default cluster ID for Data Product (read only)"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date (read only)"
          },
          "modifiedOn": {
            "format": "date-time",
            "type": "string",
            "description": "Modified date (read only)"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/CreatedBy"
          }
        },
        "description": "A Galaxy Data Product",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateClusterPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the cluster"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Updated cloud region ID of the cluster"
          },
          "catalogRefs": {
            "type": "array",
            "description": "Catalog IDs to attach to the cluster",
            "items": {
              "type": "string",
              "description": "Catalog IDs to attach to the cluster"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle suspend duration (in minutes)",
            "nullable": false
          },
          "processingMode": {
            "type": "string",
            "description": "Cluster query processing mode",
            "enum": [
              "Batch",
              "WarpSpeed"
            ]
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count",
            "nullable": false
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable/Disable a cluster",
            "nullable": false
          },
          "resultCacheEnabled": {
            "type": "boolean",
            "description": "Enable/Disable resultset caching",
            "nullable": false
          },
          "resultCacheDefaultVisibilitySeconds": {
            "format": "int64",
            "type": "integer",
            "description": "Default visibility for resultset caching (in seconds)",
            "nullable": false
          },
          "privateLinkCluster": {
            "type": "boolean",
            "description": "Enable/Disable Private Link",
            "nullable": false
          }
        },
        "description": "Update a Trino cluster",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "RowFilter": {
        "required": [
          "created",
          "description",
          "expression",
          "modified",
          "name",
          "rowFilterId",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "rowFilterId": {
            "type": "string",
            "description": "Row Filter ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Row Filter name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Row Filter expression (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A row filter",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedRole": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "RunSchemaDiscovery": {
        "required": [
          "forceFullDiscovery",
          "options",
          "skipApplying",
          "uri"
        ],
        "properties": {
          "uri": {
            "type": "string",
            "description": "Root uri, that schema discovery will start from. Current role must have location security correctly set up. (read only)"
          },
          "defaultSchemaName": {
            "type": "string",
            "description": "Schema name that will be used for top-level tables, which aren't under any schema (read only)"
          },
          "options": {
            "type": "object",
            "description": "Configuration options for schema discovery",
            "additionalProperties": {
              "type": "string",
              "description": "Configuration options for schema discovery (read only)"
            }
          },
          "skipApplying": {
            "type": "boolean",
            "description": "Do not apply schema discovery results to catalog, useful if tables needs to be inspected manually before running SQLs (read only)",
            "nullable": false
          },
          "forceFullDiscovery": {
            "type": "boolean",
            "description": "Always run full discovery, disregarding any previous discoveries under same `uri` (read only)",
            "nullable": false
          }
        },
        "description": "Run schema discovery",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Catalog2": {
        "required": [
          "catalogId",
          "catalogKind",
          "catalogName",
          "localRegions"
        ],
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "Catalog Id (read only)"
          },
          "catalogName": {
            "type": "string",
            "description": "Name of the catalog (read only)"
          },
          "catalogKind": {
            "type": "string",
            "description": "Kind of catalog (read only)"
          },
          "localRegions": {
            "type": "array",
            "description": "Set of local regions for the catalog",
            "items": {
              "type": "string",
              "description": "Set of local regions for the catalog (read only)"
            }
          }
        },
        "description": "Catalog details (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "RowFilterForUpdatePatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Row filter name"
          },
          "expression": {
            "type": "string",
            "description": "Row filter expression"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Update a row filter",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreatePolicy": {
        "required": [
          "description",
          "name",
          "predicate",
          "roleId",
          "scopes"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Enabling role id (read only)"
          },
          "name": {
            "type": "string",
            "description": "Policy name (read only)"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate (read only)"
          },
          "description": {
            "type": "string",
            "description": "Policy description (read only)"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration (read only)"
          },
          "scopes": {
            "type": "array",
            "description": "Policy scopes",
            "items": {
              "$ref": "#/components/schemas/Scopes"
            }
          }
        },
        "description": "A new policy",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Column": {
        "required": [
          "columnId",
          "nullable",
          "tagName"
        ],
        "properties": {
          "columnId": {
            "type": "string",
            "description": "Column ID (read only)"
          },
          "dataType": {
            "type": "string",
            "description": "Any data type returned from the data source (read only)"
          },
          "columnDefault": {
            "type": "string",
            "description": "Any column default returned from the data source (read only)"
          },
          "nullable": {
            "type": "boolean",
            "description": "Whether the column is nullable or not (read only)",
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Any description set for this column (read only)"
          },
          "tagName": {
            "type": "array",
            "description": "Any tags set for this column",
            "items": {
              "$ref": "#/components/schemas/TagName"
            }
          }
        },
        "description": "A column from a catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "ColumnMask": {
        "required": [
          "columnMaskId",
          "columnMaskType",
          "created",
          "description",
          "expression",
          "modified",
          "name",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "columnMaskId": {
            "type": "string",
            "description": "Column Mask ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Column Mask name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Column Mask expression (read only)"
          },
          "columnMaskType": {
            "type": "string",
            "description": "Column Mask type (read only)",
            "enum": [
              "Any",
              "Integer",
              "Boolean",
              "Date",
              "Decimal",
              "Real",
              "Double",
              "Timestamp",
              "TimestampWithTimeZone",
              "Time",
              "TimeWithTimeZone",
              "Varbinary",
              "Varchar"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Created on (read only)"
          },
          "modified": {
            "format": "date-time",
            "type": "string",
            "description": "Modified on (read only)"
          }
        },
        "description": "A column mask",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateServiceAccountPassword": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Service account password description (read only)"
          }
        },
        "description": "A service account password",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Scopes": {
        "required": [
          "entityId",
          "entityKind",
          "rowFilterIds"
        ],
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          },
          "privileges": {
            "$ref": "#/components/schemas/Privileges"
          },
          "rowFilterIds": {
            "type": "array",
            "description": "Row filters",
            "items": {
              "type": "string",
              "description": "Row filters"
            }
          },
          "columnMaskId": {
            "type": "string",
            "description": "Column mask"
          }
        },
        "description": "Policy scopes (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreatedBy": {
        "required": [
          "email",
          "userId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID (read only)"
          },
          "email": {
            "type": "string",
            "description": "User email (read only)"
          }
        },
        "description": "Created by user. If empty then the user is inactive/deleted. (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedRolegrant": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/DirectlyGrantedRoles"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateRolePatch": {
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name"
          },
          "roleDescription": {
            "type": "string",
            "description": "Role description"
          },
          "owningRoleId": {
            "type": "string",
            "description": "Owning role"
          },
          "updateRoleGrant": {
            "type": "array",
            "description": "Directly granted roles",
            "items": {
              "$ref": "#/components/schemas/UpdateRoleGrantPatch"
            }
          }
        },
        "description": "Update a role",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateUser": {
        "required": [
          "email",
          "roleId",
          "roleIds"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email (read only)"
          },
          "roleIds": {
            "type": "array",
            "description": "Role IDs",
            "items": {
              "type": "string",
              "description": "Role IDs (read only)"
            }
          },
          "roleId": {
            "type": "string",
            "description": "Default role (read only)"
          }
        },
        "description": "A new user",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "FieldViolations": {
        "required": [
          "description",
          "field"
        ],
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name"
          },
          "description": {
            "type": "string",
            "description": "Description of the violation"
          }
        },
        "description": "Field violations (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "Links": {
        "required": [
          "name",
          "uri"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the link (read only)"
          },
          "uri": {
            "type": "string",
            "description": "The link URI (read only)"
          }
        },
        "description": "Any links set for this schema (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "RoleWithName": {
        "required": [
          "roleId",
          "roleName"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Role ID (read only)"
          },
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          }
        },
        "description": "The role that owns this catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateRowFilter": {
        "required": [
          "description",
          "expression",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Row filter name (read only)"
          },
          "expression": {
            "type": "string",
            "description": "Row filter expression (read only)"
          },
          "description": {
            "type": "string",
            "description": "Description (read only)"
          }
        },
        "description": "A new row filter",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "ContactsPatch": {
        "description": "Data Product contacts",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Tag": {
        "required": [
          "color",
          "name",
          "syncToken",
          "tagId"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "tagId": {
            "type": "string",
            "description": "Tag ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          },
          "color": {
            "type": "string",
            "description": "Tag color (read only)"
          },
          "description": {
            "type": "string",
            "description": "Comment (read only)"
          }
        },
        "description": "A tag",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedRowFilter": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/RowFilter"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Role": {
        "required": [
          "allRoles",
          "createdOn",
          "directlyGrantedRoles",
          "modifiedOn",
          "roleId",
          "roleName",
          "syncToken"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID (read only)"
          },
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          },
          "roleDescription": {
            "type": "string",
            "description": "Role description (read only)"
          },
          "owningRoleId": {
            "type": "string",
            "description": "Owning role (read only)"
          },
          "directlyGrantedRoles": {
            "type": "array",
            "description": "Directly granted roles",
            "items": {
              "$ref": "#/components/schemas/DirectlyGrantedRoles"
            }
          },
          "allRoles": {
            "type": "array",
            "description": "All directly granted and inherited roles",
            "items": {
              "$ref": "#/components/schemas/DirectlyGrantedRoles"
            }
          },
          "createdOn": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date (read only)"
          },
          "modifiedOn": {
            "format": "date-time",
            "type": "string",
            "description": "Modified date (read only)"
          }
        },
        "description": "A role",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedColumnMask": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/ColumnMask"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Cluster": {
        "required": [
          "batchCluster",
          "catalogRefs",
          "cloudRegionId",
          "clusterId",
          "maxWorkers",
          "minWorkers",
          "name",
          "syncToken",
          "warpSpeedCluster"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "clusterId": {
            "type": "string",
            "description": "Cluster ID (read only)"
          },
          "name": {
            "type": "string",
            "description": "Cluster name (read only)"
          },
          "cloudRegionId": {
            "type": "string",
            "description": "Cloud region ID (read only)"
          },
          "catalogRefs": {
            "type": "array",
            "description": "Cluster attached catalog IDs",
            "items": {
              "type": "string",
              "description": "Cluster attached catalog IDs (read only)"
            }
          },
          "idleStopMinutes": {
            "format": "int32",
            "type": "integer",
            "description": "Idle stop duration (in minutes) (read only)",
            "nullable": false
          },
          "batchCluster": {
            "type": "boolean",
            "description": "Supports resource intensive query processing mode (read only)",
            "nullable": false
          },
          "warpSpeedCluster": {
            "type": "boolean",
            "description": "Supports warp speed mode (read only)",
            "nullable": false
          },
          "minWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Minimum worker count (read only)",
            "nullable": false
          },
          "maxWorkers": {
            "format": "int32",
            "type": "integer",
            "description": "Maximum worker count (read only)",
            "nullable": false
          },
          "clusterState": {
            "type": "string",
            "description": "Cluster state (read only)"
          },
          "trinoUri": {
            "type": "string",
            "description": "Connection URL (read only)"
          }
        },
        "description": "A Trino cluster",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Badrequest": {
        "required": [
          "fieldViolations"
        ],
        "properties": {
          "fieldViolations": {
            "type": "array",
            "description": "Field violations",
            "items": {
              "$ref": "#/components/schemas/FieldViolations"
            }
          }
        },
        "description": "Invalid request (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "CreateRole": {
        "required": [
          "grantToCreatingRole",
          "roleName"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name (read only)"
          },
          "roleDescription": {
            "type": "string",
            "description": "Role description (read only)"
          },
          "grantToCreatingRole": {
            "type": "boolean",
            "description": "Grant to creating role (read only)",
            "nullable": false
          }
        },
        "description": "A role",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "UpdateServiceAccountPatch": {
        "properties": {
          "roleId": {
            "type": "string",
            "description": "Default role ID"
          },
          "additionalRoleIds": {
            "type": "array",
            "description": "Additional roles",
            "items": {
              "type": "string",
              "description": "Additional roles"
            }
          }
        },
        "description": "Update a service account",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedPolicy": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "CreateTag": {
        "required": [
          "color",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name (read only)"
          },
          "color": {
            "type": "string",
            "description": "Tag color (read only)"
          },
          "description": {
            "type": "string",
            "description": "comment (read only)"
          }
        },
        "description": "A tag",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Violations": {
        "required": [
          "description",
          "subject",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Violation type",
            "enum": [
              "TermsOfService"
            ]
          },
          "subject": {
            "type": "string",
            "description": "Violation subject"
          },
          "description": {
            "type": "string",
            "description": "Violation description"
          }
        },
        "description": "Field violations (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "Principal": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Principal ID"
          },
          "type": {
            "type": "string",
            "description": "Principal type",
            "enum": [
              "User",
              "Role",
              "Group"
            ]
          }
        },
        "description": "Principal (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedServiceAccount": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/ServiceAccount"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "DirectlyGrantedRoles": {
        "required": [
          "adminOption",
          "principal",
          "roleId",
          "roleName"
        ],
        "properties": {
          "roleName": {
            "type": "string",
            "description": "Role name"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID"
          },
          "principal": {
            "$ref": "#/components/schemas/Principal"
          },
          "adminOption": {
            "type": "boolean",
            "description": "Admin option",
            "nullable": false
          }
        },
        "description": "Directly granted roles (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Resourceinfo": {
        "required": [
          "description",
          "resourceName"
        ],
        "properties": {
          "resourceName": {
            "type": "string",
            "description": "Name of the resource (read only)"
          },
          "description": {
            "type": "string",
            "description": "Violation description (read only)"
          }
        },
        "description": "Resource failure or inconsistency (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "Privileges": {
        "required": [
          "grantKind",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind (read only)",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "privilege": {
            "type": "array",
            "description": "Privileges",
            "items": {
              "type": "string",
              "description": "Privileges (read only)",
              "enum": [
                "ManageSecurity",
                "CreateRole",
                "CreateUser",
                "CreateCluster",
                "CreateCatalog",
                "ViewAuditLog",
                "ManageBilling",
                "ManageNotifications",
                "ViewAllQueryHistory",
                "ManageSso",
                "SsoUserPasswordLogin",
                "ViewAllDataLineage",
                "UseCluster",
                "EnableDisableCluster",
                "MonitorCluster",
                "CreateSchema",
                "CreateTable",
                "Insert",
                "Delete",
                "Select",
                "Update",
                "ManageDataObservability",
                "CreateSql",
                "Execute",
                "ManageServiceAccount",
                "ManageServiceAccountToken",
                "ManageOauthClient",
                "ViewPublicOauthClient",
                "ManageAccountWork",
                "CreateTag",
                "ApplyTag",
                "ApplyTagInPath",
                "GenerativeAiFeatures",
                "ManageIngestStreams",
                "CreateFunction",
                "CancelQuery",
                "ViewDataProduct",
                "DownloadQueryResults",
                "ManageQueryRoutingRules"
              ]
            }
          }
        },
        "description": "Privileges (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Preconditionfailure": {
        "required": [
          "violations"
        ],
        "properties": {
          "violations": {
            "type": "array",
            "description": "Field violations",
            "items": {
              "$ref": "#/components/schemas/Violations"
            }
          }
        },
        "description": "Required precondition was not met (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "Table": {
        "required": [
          "contacts",
          "tableId",
          "tagName"
        ],
        "properties": {
          "tableId": {
            "type": "string",
            "description": "Table ID (read only)"
          },
          "tableType": {
            "type": "string",
            "description": "Any table type returned from the data source (read only)"
          },
          "description": {
            "type": "string",
            "description": "Any description set for this table (read only)"
          },
          "roleWithName": {
            "$ref": "#/components/schemas/RoleWithName"
          },
          "tagName": {
            "type": "array",
            "description": "Any tags set for this table",
            "items": {
              "$ref": "#/components/schemas/TagName"
            }
          },
          "contacts": {
            "type": "array",
            "description": "Any contacts set for this table",
            "items": {
              "$ref": "#/components/schemas/Contacts"
            }
          }
        },
        "description": "A table from a catalog (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "GrantedPrivilege": {
        "required": [
          "entityId",
          "entityKind",
          "grantKind",
          "grantOption",
          "privilege"
        ],
        "properties": {
          "grantKind": {
            "type": "string",
            "description": "Grant kind",
            "enum": [
              "Allow",
              "Deny"
            ]
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "entityKind": {
            "type": "string",
            "description": "Entity kind",
            "enum": [
              "Account",
              "Cluster",
              "Catalog",
              "Schema",
              "Table",
              "Column",
              "Location",
              "Function",
              "Tag",
              "Policy",
              "RowFilter",
              "DataProduct"
            ]
          },
          "grantOption": {
            "type": "boolean",
            "description": "Grant option",
            "nullable": false
          },
          "privilege": {
            "type": "string",
            "description": "Privilege",
            "enum": [
              "ManageSecurity",
              "CreateRole",
              "CreateUser",
              "CreateCluster",
              "CreateCatalog",
              "ViewAuditLog",
              "ManageBilling",
              "ManageNotifications",
              "ViewAllQueryHistory",
              "ManageSso",
              "SsoUserPasswordLogin",
              "ViewAllDataLineage",
              "UseCluster",
              "EnableDisableCluster",
              "MonitorCluster",
              "CreateSchema",
              "CreateTable",
              "Insert",
              "Delete",
              "Select",
              "Update",
              "ManageDataObservability",
              "CreateSql",
              "Execute",
              "ManageServiceAccount",
              "ManageServiceAccountToken",
              "ManageOauthClient",
              "ViewPublicOauthClient",
              "ManageAccountWork",
              "CreateTag",
              "ApplyTag",
              "ApplyTagInPath",
              "GenerativeAiFeatures",
              "ManageIngestStreams",
              "CreateFunction",
              "CancelQuery",
              "ViewDataProduct",
              "DownloadQueryResults",
              "ManageQueryRoutingRules"
            ]
          },
          "schemaName": {
            "type": "string",
            "description": "Schema name"
          },
          "tableName": {
            "type": "string",
            "description": "Table name"
          },
          "columnName": {
            "type": "string",
            "description": "Column name"
          }
        },
        "description": "A role privilege (read only)",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "Quotafailure": {
        "required": [
          "fieldViolations"
        ],
        "properties": {
          "fieldViolations": {
            "type": "array",
            "description": "Field violations",
            "items": {
              "$ref": "#/components/schemas/FieldViolations"
            }
          }
        },
        "description": "Quota failure or inconsistency (read only)",
        "x-tags": [
          "Responses"
        ]
      },
      "UpdatePolicyPatch": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Policy name"
          },
          "predicate": {
            "type": "string",
            "description": "Policy predicate"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "expiration": {
            "format": "date-time",
            "type": "string",
            "description": "Policy expiration"
          },
          "scopes": {
            "type": "array",
            "description": "Policy scopes",
            "items": {
              "$ref": "#/components/schemas/ScopesPatch"
            }
          }
        },
        "description": "A new policy",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "SchemaDiscovery": {
        "required": [
          "catalogId",
          "createdAt",
          "createdTablesCount",
          "defaultSchemaName",
          "deletedTablesCount",
          "discoveredSqlStatement",
          "errors",
          "options",
          "schemaDiscoveryId",
          "status",
          "syncToken",
          "updatedTablesCount",
          "uri"
        ],
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Used to ensure consistency for resource updates. A syncToken that is returned\nfrom the server is valid until the resource is updated when a new syncToken will\nbe generated. Only the latest version of the object is maintained.\n (read only)"
          },
          "schemaDiscoveryId": {
            "type": "string",
            "description": "Schema discovery ID (read only)"
          },
          "catalogId": {
            "type": "string",
            "description": "Catalog ID (read only)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery was created (read only)"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery has started (read only)"
          },
          "finishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Time when schema discovery has finished (read only)"
          },
          "uri": {
            "type": "string",
            "description": "Root location for schema discovery (read only)"
          },
          "defaultSchemaName": {
            "type": "string",
            "description": "Default schema name, used when tables without schemas were discovered (read only)"
          },
          "status": {
            "type": "string",
            "description": "Status of schema discovery (read only)",
            "enum": [
              "Scheduled",
              "Running",
              "Errored",
              "Success",
              "RescanScheduled",
              "RescanRunning",
              "ApplyScheduled",
              "ApplyRunning",
              "ApplyErrored",
              "ApplySuccess",
              "Deprecated"
            ]
          },
          "basedOnSchemaDiscoveryId": {
            "type": "string",
            "description": "ID of schema discovery which this one is based on, in case of diff runs (read only)"
          },
          "errors": {
            "type": "array",
            "description": "Errors that prevented schema discovery to finish",
            "items": {
              "type": "string",
              "description": "Errors that prevented schema discovery to finish (read only)"
            }
          },
          "options": {
            "type": "object",
            "description": "Configuration options",
            "additionalProperties": {
              "type": "string",
              "description": "Configuration options (read only)"
            }
          },
          "discoveredSqlStatement": {
            "type": "array",
            "description": "Generated SQL statements",
            "items": {
              "$ref": "#/components/schemas/DiscoveredSqlStatement"
            }
          },
          "createdTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to create (read only)",
            "nullable": false
          },
          "updatedTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to update (read only)",
            "nullable": false
          },
          "deletedTablesCount": {
            "format": "int32",
            "type": "integer",
            "description": "Number of tables to delete (read only)",
            "nullable": false
          }
        },
        "description": "A schema discovery run",
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedSchemaDiscovery": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/SchemaDiscovery"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedSchema": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/Schema"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      },
      "PaginatedDataProduct": {
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token to use or \"\" if there are no more pages."
          },
          "result": {
            "type": "array",
            "description": "A page of results.",
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            }
          }
        },
        "x-tags": [
          "Model Definitions"
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Help",
      "tags": [
        "About",
        "Access Tokens"
      ]
    },
    {
      "name": "Services",
      "tags": [
        "Cluster Service",
        "User Service",
        "Role Service",
        "Privilege Service",
        "SchemaDiscovery Service",
        "Catalog Service",
        "Discovery Service",
        "Tag Service",
        "RowFilter Service",
        "ServiceAccount Service",
        "ColumnMask Service",
        "Policy Service",
        "DataProduct Service"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "Model Definitions",
        "Responses"
      ]
    }
  ]
}